---
apiVersion: v1
kind: Service
metadata:
  name: model-service
  namespace: f1
spec:
  type: ClusterIP
  selector:
    app: model-service
  ports:
    - name: http
      port: 8000
      targetPort: 8000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-service
  namespace: f1
spec:
  replicas: 2
  revisionHistoryLimit: 0
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: model-service
  template:
    metadata:
      labels:
        app: model-service
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      volumes:
        - name: models
          emptyDir: {}
      initContainers:
        - name: fetch-models
          image: python:3.12-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          env:
            - name: MODELS_ZIP_URL
              value: "https://f1models.s3.us-east-1.amazonaws.com/models.zip"
            - name: ZIP_TOP_DIR
              value: "models"
          command: ["sh", "-c"]
          args:
            - |
              set -euo pipefail
              mkdir -p /work /models
              python - <<'PY'
              import os, urllib.request, zipfile, shutil
              url = os.environ['MODELS_ZIP_URL']
              dst = '/work/models.zip'
              print(f"Downloading {url} -> {dst}", flush=True)
              with urllib.request.urlopen(url) as r, open(dst, 'wb') as f:
                  f.write(r.read())
              print("Unzipping...", flush=True)
              with zipfile.ZipFile(dst) as z:
                  z.extractall('/work')
              top = os.environ.get('ZIP_TOP_DIR', 'models')
              src = f'/work/{top}' if os.path.isdir(f'/work/{top}') else '/work/models'
              os.makedirs('/models', exist_ok=True)
              for name in os.listdir(src):
                  s = os.path.join(src, name)
                  d = os.path.join('/models', name)
                  if os.path.isdir(s):
                      shutil.copytree(s, d, dirs_exist_ok=True)
                  else:
                      shutil.copy2(s, d)
              print("Model staging complete.", flush=True)
              PY
          volumeMounts:
            - name: models
              mountPath: /models
      containers:
        - name: app
          image: 590184119443.dkr.ecr.us-east-1.amazonaws.com/f1/model_service:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef:
                name: model-service-config
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: POSTGRES_PASSWORD
          readinessProbe:
            httpGet: { path: /api/v1/health, port: 8000 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /api/v1/health, port: 8000 }
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - name: models
              mountPath: /app/models
              readOnly: true
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
