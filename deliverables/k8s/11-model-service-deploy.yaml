apiVersion: v1
kind: Service
metadata:
  name: model-service
  namespace: f1
spec:
  selector:
    app: model-service
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: model-service
  namespace: f1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: model-service
  template:
    metadata:
      labels:
        app: model-service
    spec:
      # Init container pulls models from object storage into an EmptyDir
      initContainers:
        - name: fetch-models
          image: curlimages/curl:8.15.0
          command: ["sh", "-c"]
          # Example: download a tarball of pickle files from S3/MinIO and extract
          args:
            - >
              set -eux;
              mkdir -p /models;
              curl -L "$MODEL_ARCHIVE_URL" -o /tmp/models.tar.gz;
              tar -xzf /tmp/models.tar.gz -C /models;
          env:
            - name: MODEL_ARCHIVE_URL
              value: "https://storage.example.com/f1/models.tar.gz"
          volumeMounts:
            - name: models
              mountPath: /models
      containers:
        - name: app
          image: 590184119443.dkr.ecr.us-east-1.amazonaws.com/f1/model_service:latest
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef: { name: model-service-config }
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef: { name: db-secrets, key: POSTGRES_PASSWORD }
          readinessProbe:
            httpGet: { path: "/health", port: 8000 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: "/health", port: 8000 }
            initialDelaySeconds: 20
            periodSeconds: 10
          volumeMounts:
            - name: models
              mountPath: /app/models
              readOnly: true
      volumes:
        - name: models
          emptyDir: {}
